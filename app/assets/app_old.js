var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$http",function(t,o,n){localStorage.token&&(n.defaults.headers.common["X-Auth"]=localStorage.token,o.getUser().then(function(o){t.currentUser=o})),t.$on("login",function(o,n){console.log("[ApplicationCtrl] login event for:    "+n.username),t.currentUser=n}),t.logout=function(){t.currentUser=null,o.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(n,e){o.login(n,e).then(function(o){t.$emit("login",o)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({body:t.postBody}).success(function(o){console.log("[posts.ctrl.js] success posting!"),t.postBody=null})},o.fetch().success(function(o){t.posts=o}),t.$on("ws:new_post",function(o,n){t.$apply(function(){t.posts.unshift(n)})})}]),angular.module("app").service("PostSvc",["$http",function(t){this.fetch=function(){return t.get("api/posts")},this.create=function(o){return t.post("api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.createUser=function(n,e){o.createUser(n,e).then(function(){return o.login(n,e)})["catch"](function(t){throw t.status+" "+t.data}).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.createUser=function(o,n){return t.post("/api/users",{username:o,password:n})},o.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return localStorage.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})},o.logout=function(){delete t.defaults.headers.common["X-Auth"],delete localStorage.token}}]),angular.module("app").service("WebSocketSvc",["$rootScope","$timeout","$window",function(t,o,n){function e(){return"https:"===n.location.protocol?"wss://"+n.location.host:"ws://"+n.location.host}var r;this.connect=function(){console.log("Websocket connecting...");var n=e(),r=new WebSocket(n),c=this;r.onclose=function(){console.log("Websocket closed. Reconnecting..."),o(c.connect,1e4)},r.onmessage=function(o){var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}},this.send=function(t,o){var n=JSON.stringify({topic:t,data:o});r.send(n)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;base64,
